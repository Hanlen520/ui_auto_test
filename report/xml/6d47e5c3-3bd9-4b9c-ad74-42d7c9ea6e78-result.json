{"name": "test_create_service_openstack", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of <textarea class=\"col-md-12 ng-pristine ng-untouched ng-valid ng-not-empty ng-valid-required\" name=\"authenInfo\" type=\"text\"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed", "trace": "self = <test_07_create_service.TestCreateService object at 0x059FE950>\n\n    @allure.story(\"创建opentack服务\")\n    @pytest.mark.flaky(reruns=5)\n    def test_create_service_openstack(self):\n        p_data = datainfo.get_xls_to_dict(\"res_node_data.xlsx\", \"openstackapi\")[0]\n        self.arn.add_resource_service_node_vmware(p_data[\"regionname\"], p_data[\"nodename\"], p_data[\"servicename\"],\n>                                                 p_data[\"servicetype\"], p_data[\"username\"], p_data[\"passwrd\"])\n\ntestcase\\test_07_create_service.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npublic\\appModel\\resNodeAction.py:90: in add_resource_service_node_vmware\n    self.regionpg.input_vmware_name(username)\npublic\\pages\\sys_regionMgrPage.py:78: in input_vmware_name\n    self.dr.clear_type(\"name->authenInfo\",value)\npublic\\common\\pyselenium.py:194: in clear_type\n    el.clear()\nD:\\Env\\ui_auto\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:95: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nD:\\Env\\ui_auto\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nD:\\Env\\ui_auto\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x059F9B10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"The element reference of <textarea cl...req<@chrome://marionette/content/listener.js:524:29\\\\ndispatch/<@chrome://marionette/content/listener.js:523:15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of <textarea class=\"col-md-12 ng-pristine ng-untouched ng-valid ng-not-empty ng-valid-required\" name=\"authenInfo\" type=\"text\"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed\n\nD:\\Env\\ui_auto\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException"}, "steps": [{"name": "创建资源节点服务", "status": "passed", "attachments": [{"source": "f771e48c-9dca-4f4f-9840-1070552ccfad-attachment.attach"}, {"source": "9c6b4817-1f56-4171-83ed-ca0e7d67a025-attachment.attach"}, {"source": "d1863ce5-18e2-4c3a-9012-595689816563-attachment.attach"}, {"source": "c62d8cfc-7758-4251-a841-6829e6c35c4a-attachment.attach"}, {"source": "b9547a15-3bcd-406d-80d0-be4e9e0553f1-attachment.attach"}, {"source": "b47bfe89-488a-4ff1-896c-54eb9e9210e5-attachment.attach"}], "start": 1572761494972, "stop": 1572761494978}], "attachments": [{"name": "log", "source": "b5e75ecf-3a28-4793-a632-09ed236cc4b2-attachment.txt", "type": "text/plain"}], "start": 1572761494964, "stop": 1572761501258, "uuid": "000c8c19-f9b7-4d76-a37d-8ff2ce075a4e", "historyId": "da070d5411fc6312763976f9aa884e99", "testCaseId": "6aee9b3180a0f70137437a09aa09202d", "fullName": "testcase.test_07_create_service.TestCreateService#test_create_service_openstack", "labels": [{"name": "feature", "value": "资源节点管理"}, {"name": "story", "value": "创建opentack服务"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_07_create_service"}, {"name": "subSuite", "value": "TestCreateService"}, {"name": "host", "value": "wuzs"}, {"name": "thread", "value": "23024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_07_create_service"}]}